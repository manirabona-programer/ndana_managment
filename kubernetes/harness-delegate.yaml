# Default values for delegate-ng.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  pullPolicy: Always

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 8080

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

delegateName: harness-delegate-ng

deployMode: "KUBERNETES"

delegateDockerImage: ""

imagePullSecret: ""

# Endpoint that will point to harness platform. For accessing SAAS platform use the default value.
managerEndpoint: https://app.harness.io

# If socket connection is not supported, set this flag to true to poll tasks using rest API calls
pollForTasks: "false"

# Change this to alter startup probe and liveness probe settings
startupProbe:
  initialDelaySeconds: 10
  periodSeconds: 10
  failureThreshold: 40

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 20
  failureThreshold: 3

# Add delegate description and tags
description: ""
tags: ""

# Permissions for installed delegate, could be CLUSTER_ADMIN, CLUSTER_VIEWER or NAMESPACE_ADMIN
# For using custom role: Create role in kubernetes cluster and refer role in k8sPermissionsType field.
# for example if your custom role name is custom-role, then you need to add
#k8sPermissionsType: "custom-role"
k8sPermissionsType: "CLUSTER_ADMIN"

# Number of pod replica running delegate image
replicas: 1

# Resource limits of container running delegate image in kubernetes
cpu: 1
memory: 2048

# Script to run before delegate installation
initScript: ""

delegateType: "HELM_DELEGATE"

javaOpts: "-Xms64M"

upgrader:
  enabled: true
  upgraderDockerImage: "harness/upgrader:latest"
  cronJobServiceAccountName: "upgrader-cronjob-sa"

securityContext:
  runAsRoot: true

nextGen: true

# Below are the required fields, no default values are populated for these.
# Please add values for delegate to work.

# Account Id to which the delegate will be connecting
accountId: ""
# Delegate Token
delegateToken: ""

# Configure a Kubernetes build farm to use self-signed certificates
# https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/configure-a-kubernetes-build-farm-to-use-self-signed-certificates/
# CAUTION
# Make sure that the destination path is not same as the default CA certificate path of the corresponding container image.
#
# If you want to override the default certificate file, make sure the Kubernetes secret or config map (from step one) includes all certificates required by the pipelines that will use this build infrastructure.
shared_certificates:
  # Location in the delegate to which the ca_bundle will be mounted or a location in the custom delegate image to which the
  # CA chain has already been placed as part of creating the custom delegate image
  certs_path: /shared/customer-artifacts/certificates/ca.bundle
  # Example Certificate Chain (Multi-line files )
  # ca_bundle should be the text of the CA Bundle to include in a secret
  #
  # Note: when defined, the secret will be mounted to the certs_path location on the delegate
  ca_bundle: # |
  #   -----BEGIN CERTIFICATE-----
  #   XXXXXXXXXXXXXXXXXXXXXXXXXXX
  #   -----END CERTIFICATE-------
  #   -----BEGIN CERTIFICATE-----
  #   XXXXXXXXXXXXXXXXXXXXXXXXXXX
  #   -----END CERTIFICATE-------

  # CI Mount targets are the locations that the secrets should be mounted in the CI Images.  This will share any CA chain defined in the certs_path key to any CI image
  # configured in the pod.
  ci_mount_targets:
    # - /etc/ssl/certs/ca-bundle.crt
    # - /etc/ssl/certs/ca-certificates.crt
    # - /kaniko/ssl/certs/additional-ca-cert-bundle.crt

custom_envs:

custom_mounts:

custom_volumes:

# minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available.
# This is set for improving stability during upgrade. It will tell kubernetes to wait at least this amount of seconds before removing the old pod after the new one becomes ready.
minReadySeconds: 120
