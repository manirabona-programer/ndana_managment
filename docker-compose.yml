version: "3.8"

networks:
  laravel:
    name: laravel

services:

    # Nginx Service
    nginx:
        build:
            context: .
            dockerfile: nginx.dockerfile
        container_name: nginx
        depends_on:
            - php
            - database
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./src:/var/www/html
        networks:
            - laravel

    # PHP service
    php:
        build:
            context: .
            target: php
            args:
                - APP_ENV=${APP_ENV}
        container_name: php
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=app
        working_dir: /var/www
        volumes:
          - ./src:/var/www/html
        ports:
          - 8000:8000
        depends_on:
            - database
            - redis
        networks:
            - laravel

    # Database service
    database:
        image: mysql:8.0
        container_name: database
        ports:
          - 3306:3306
        environment:
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USERNAME=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
        volumes:
            - ./mysql:/var/lib/mysql
        networks:
            - laravel

    # Redis Service
    redis:
        image: redis:alpine
        command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
        ports:
          - 6379:6379

    # Queue Service
    queue:
        build:
            context: .
            target: php
            args:
                - APP_ENV=${APP_ENV}
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=queue
        working_dir: /var/www
        volumes:
          - ./:/var/www

    # Node service
    node:
        build:
            context: .
            target: node
        volumes:
          - .:/usr/src
          - ./node_modules:/usr/src/node_modules
        tty: true

    # App Service
    app:
        build: .
        entrypoint: /usr/local/bin/docker-php-entrypoint-dev
        command: ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"]
        volumes:
            - ./:/var/www
            -  /var/www/vendor
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
        environment:
            - APP_ENV=local
            - APP_KEY=base64:tLmYfUrrZITzLIkSjFnV+PCAFxkdU+duUxjVSIlrrHo=
            - APP_DEBUG=true
            - DB_CONNECTION=mysql
            - DB_HOST=database ## same as the database service name
            - DB_PORT=3306
            - DB_DATABASE=ndana_db
            - DB_USERNAME=root
            - DB_PASSWORD=root
        restart: unless-stopped
        ports:
            - 8000:80
        depends_on:
            - database

    # Composer service
    composer:
        image: composer:latest
        container_name: composer
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        networks:
            - laravel

    artisan:
        build:
            context: .
            dockerfile: php.dockerfile
        container_name: artisan
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        entrypoint: ["php", "artisan"]
        networks:
            - laravel

    npm:
        image: node:13.7
        container_name: npm
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        entrypoint: ['npm']
        networks:
            - laravel

    phpunit:
        build:
            context: .
            dockerfile: php.dockerfile
        container_name: phpunit
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        entrypoint: ["/var/www/html/vendor/bin/phpunit"]
        networks:
            - laravel

volumes:
    db-data: ~
